sewer$PCRType <- "qPCR"
hamburg$PCRType <- "qPCR"
sewer <- sewer %>% mutate(TargetDetected = case_when(tolower(trimws(`RT-qPCR`)) == "y" ~ "Yes",
#is.na(sewer$`RT-qPCR`) ~ "No",
T ~ "No"))
hamburg <- hamburg %>% mutate(TargetDetected = case_when(tolower(trimws(`RT-qPCR`)) == "y" ~ "Yes",
#is.na(sewer$`RT-qPCR`) ~ "No",
T ~ "No"))
sewer$DetectedNotQuantifiable <- "No"
hamburg$DetectedNotQuantifiable <- "No"
sewer$QualityControlPassed <- "Yes"
hamburg$QualityControlPassed <- "Yes"
sewer$DetectionLowerLimit <- as.numeric(sewer$DetectionLowerLimit)
sewer$DetectionLowerLimit[is.na(sewer$DetectionLowerLimit)] <- 0
hamburg$DetectionLowerLimit <- as.numeric(hamburg$DetectionLowerLimit)
hamburg$DetectionLowerLimit[is.na(hamburg$DetectionLowerLimit)] <- 0
#for the genome copy quantification, for the EGLE database,
# they need gc per 100 mL. Our record is gc per 1 mL. So for those two columns
# (N1GeneCopies and N2GeneCopies), the data needs to time 100.
sewer$N1GeneCopies <- as.numeric(sewer$`quantity.(copies/mL)`) * 100
hamburg$N1GeneCopies <- as.numeric(hamburg$`quantity.(copies/mL)`) * 100
# round to 5 decimals (avoid writing out as sci not)
sewer$N1GeneCopies <- round(as.numeric(sewer$N1GeneCopies), 5)
hamburg$N1GeneCopies <- round(as.numeric(hamburg$N1GeneCopies), 5)
# fill NAs with the detection lower limit
sewer$N1GeneCopies <- ifelse(is.na(sewer$N1GeneCopies) | sewer$N1GeneCopies == 0, sewer$DetectionLowerLimit, sewer$N1GeneCopies)
hamburg$N1GeneCopies <- ifelse(is.na(hamburg$N1GeneCopies) | hamburg$N1GeneCopies == 0, hamburg$DetectionLowerLimit, hamburg$N1GeneCopies)
### we are collecting this now!
sewer$N2GeneCopies <- as.numeric(sewer$N2) * 100
hamburg$N2GeneCopies <- as.numeric(hamburg$N2) * 100
# round to 5 decimals (avoid writing out as sci not)
sewer$N2GeneCopies <- round(as.numeric(sewer$N2GeneCopies), 5)
hamburg$N2GeneCopies <- round(as.numeric(hamburg$N2GeneCopies), 5)
# fill NAs with the detection lower limit
sewer$N2GeneCopies <- ifelse(is.na(sewer$N2GeneCopies) | sewer$N2GeneCopies == 0, sewer$DetectionLowerLimit, sewer$N2GeneCopies)
hamburg$N2GeneCopies <- ifelse(is.na(hamburg$N2GeneCopies) | hamburg$N2GeneCopies == 0, hamburg$DetectionLowerLimit, hamburg$N2GeneCopies)
sewer$EGeneCopies <- 0
hamburg$EGeneCopies <- 0
sewer$Phi6GeneCopies <- round(as.numeric(sewer$Phi6), 5)
hamburg$Phi6GeneCopies <- round(as.numeric(hamburg$Phi6), 5)
# fill NAs with 0
sewer$Phi6GeneCopies[is.na(sewer$Phi6GeneCopies)] <- 0
hamburg$Phi6GeneCopies[is.na(hamburg$Phi6GeneCopies)] <- 0
sewer$Comments <- sewer$note
hamburg$Comments <- ""
# According to the protocol, the team can only have either Phi6 data or Phi6 recovery data for each sample. Therefore, the team performs the Phi6 recovery test once a month and collects Phi6 every time except for those already done with Phi6 recovery test.
sewer <- sewer %>% mutate(Comments = case_when(is.na(Phi6) & !is.na(`Phi6.recovery%`) ~ paste0("Phi6 Recovery % week, no Phi6 gene copies; ", Comments),
T ~ Comments))
hamburg <- hamburg %>% mutate(Comments = case_when(is.na(Phi6) & !is.na(`Phi6.recovery%`) ~ paste0("Phi6 Recovery % week, no Phi6 gene copies; ", Comments),
T ~ Comments))
#filter(sewer, Sample == "27x5220715A")
sewer_to_state <- sewer %>% select(Sample, PCRType, TargetDetected, DetectedNotQuantifiable,
QualityControlPassed, DetectionLowerLimit, N1GeneCopies,
N2GeneCopies, EGeneCopies, Phi6GeneCopies, Comments)
hamburg_to_state <- hamburg %>% select(Sample, PCRType, TargetDetected, DetectedNotQuantifiable,
QualityControlPassed, DetectionLowerLimit, N1GeneCopies,
N2GeneCopies, EGeneCopies, Phi6GeneCopies, Comments)
#write.table(hamburg_to_state, "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES/ARCHIVE/data_upload_fix_20220824_0836.txt", row.names = FALSE, sep = "\t", quote = FALSE)
total_to_state <- rbind(sewer_to_state, hamburg_to_state)
#write.table(total_to_state, file = "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES/ARCHIVE/New folder/full_set_asof20220516.txt", row.names = FALSE, sep = "\t", quote = FALSE)
### edit comments to indicate phi6 %
#total_to_state$Comments <- ifelse(total_to_state$Phi6GeneCopies > 0, "Phi6 recovery rate%", total_to_state$Comments)
# total_to_state$Comments <- ""
################################################################################
# need to remove data that we've already submitted
archive_loc <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES/ARCHIVE"
# read in all previous files from ARCHIVE
captureall <- list.files(archive_loc, pattern = "*.txt")
previous_submit <- data.frame()
for (i in captureall){
filein <- read.delim(paste0(archive_loc, "/", i), sep = "\t")
previous_submit <- rbind(previous_submit, filein)
}
### edit last comment column so it matches sewer_to_state format
previous_submit$Comments <- as.character(previous_submit$Comments)
previous_submit$Comments[is.na(previous_submit$Comments)] <- ""
previous_submit$Comments[previous_submit$Comments == ""] <- NA_character_
previous_submit <- filter(previous_submit, !grepl("_Control", Sample))
# remove rows from new set (total_to_state) that appear in previous set(s)
total_to_state <- anti_join(total_to_state, previous_submit)
# remove incorrect
total_to_state <- filter(total_to_state, Sample != "27H1020422A")
################################################################################
total_to_state_controls <- filter(total_to_state, grepl("_Control", Sample))
total_to_state <- filter(total_to_state, !grepl("_Control", Sample))
################################################################################
## write a dated version
#folder_path <- "/mnt/c/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES"
folder_path <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES"
write.table(total_to_state, file = paste0(folder_path, "/data_upload_", rightnow_f, ".txt"), row.names = FALSE, sep = "\t", quote = FALSE)
#write.table(hamburg, file = paste0(folder_path, "/data_upload_fix_", rightnow_f, ".txt"), row.names = FALSE, sep = "\t", quote = FALSE)
write.table(total_to_state_controls, file = paste0(folder_path, "/CONTROLS/controls_data_upload_", rightnow_f, ".txt"), row.names = FALSE, sep = "\t", quote = FALSE)
################################################################################
# Upload to SSH
################################################################################
#
# setwd(folder_path)
#
# sftp_con <- sftp_connect(server = "136.181.135.38", folder = "/EGLESARS/", username = "EGLESARS27",
#              password = "Pwdtmb20@!", protocol = "sftp://", port = 2223)
#
# sftp_upload(paste0("data_upload_", rightnow_f, ".txt"), fromfolder = "/mnt/c/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID19/RTqPCR result/STATE_FILES", sftp_connection = sftp_con,
#             log_file = NA, verbose = TRUE)
#
# # establish ssh connection to swift
# #session <- ssh_connect("EGLESARS27@[136.181.135.38]:2223", passwd = "Pwdtmb20@!")
# session <- ssh_connect(host = 'EGLESARS27@[136.181.135.38]:2223',passwd = 'Pwdtmb20@!')
# # port = 2223
# # user name = EGLESARS27
# # password = Pwdtmb20@!
#
# # cd to /EGLESARS
# ssh_exec_wait(session, command = c('sh /mnt/c/Users/juliegil/Documents/UofM_Work/ww_test.sh'))
#
# ssh_exec_wait(session, command = c('cd /EGLESARS/'))
#
# # 1) send state file
# file_path <- paste0(folder_path, "/EGLESARS27.tsv")
# # scp_upload(session, files, to = ".", verbose = TRUE)
# scp_upload(session, file_path)
# scp_upload(session, file_path, to = '/EGLESARS/')
#
# # close ssh connection to swift
# ssh_disconnect(session)
#
#
# ### move the file, so only the one file ever exists in the main area
# file.rename(from=paste0(folder_path, "/data_upload_", rightnow_f, ".txt"),to=paste0(folder_path, "/ARCHIVE/data_upload_", rightnow_f, ".txt"))
# run kevin/krista wastewater data refresh
source("C:/Users/juliegil/Documents/UofM_Work/ww_app_cares_sewer/PRE_data_processing/create_ww_datasets_per_city_1.R")
source("C:/Users/juliegil/Documents/UofM_Work/ww_app_cares_sewer/PRE_data_processing/create_noro_datasets_per_city.R")
# run case data to update kevin/krista dashboard
source("C:/Users/juliegil/Documents/UofM_Work/ww_app_cares_sewer/PRE_data_processing/run_all_covid_case_sets.R")
# add trend information to sc2 ww data
source("C:/Users/juliegil/Documents/UofM_Work/ww_app_cares_sewer/PRE_data_processing/trend_cdcmodel_sc2.R")
Sys.sleep(30)
shell.exec("C:/Users/juliegil/Documents/UofM_Work/poseidon_app/git_refresh_code/update_git_code.bat")
Sys.sleep(30)
shell.exec("C:/Users/juliegil/Documents/UofM_Work/poseidon_app/python_recur.bat")
library(tidyverse)
library(lubridate)
#### read in full sars-cov-2
sc2_list <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv")
### select plate
table(filter(sc2_list$received_source == "IVYIC")$PlateName)
### select plate
table(filter(sc2_list, received_source == "IVYIC")$PlateName)
sc2_list <- filter(sc2_list, received_source == "IVYIC" & PlateName == "20220720_SC2_Illumina_Run_58")
### IVYIC and MHOME for now
sc2_list$state_loc <- substr(sc2_list$SiteName, nchar(sc2_list$SiteName) - 1, nchar(sc2_list$SiteName))
sc2_list$state_loc <- state.name[match(sc2_list$state_loc,state.abb)]
sc2_list <- sc2_list %>% mutate(sample_name = case_when(received_source == "IVYIC" ~ paste0("IVYIC-", sample_id),
received_source == "MHOME" ~ paste0("UM-", sample_id),
T ~ ""),
collected_by = case_when(received_source == "IVYIC" ~ SiteName, # Name of person or institute who collected the sample
received_source == "MHOME" ~ "Martin/Lauring Laboratory - University of Michigan",
T ~ ""),
geo_loc_name = case_when(received_source == "IVYIC" ~ paste0("USA: ", state_loc),
received_source == "MHOME" ~ "USA: Michigan",
T ~ ""),
isolate = case_when(received_source == "IVYIC" ~ subject_id,
received_source == "MHOME" ~ subject_id, # can we use that here?
T ~ ""))
organism <- "SARS-CoV-2"
sc2_list$collection_date <- sc2_list$coll_date
host <- "Homo sapiens"
host_disease <- "COVID-19"
isolation_source <- "patient isolate"
gisaid_accession <- sc2_list$gisaid_epi_isl
gisaid_virus_name <- sc2_list$gisaid_strain
sc2_list <- sc2_list %>% mutate(purpose_of_sampling = case_when(sample_per_subject > 1 ~ "Warning",
received_source %in% c("CDCIVY", "MHOME") ~ "",
grepl("PUI", flag) ~ "",
received_source == "RVTN" ~ "Research",
received_source == "IVYIC" ~ "Serial sampling",
T ~ "Baseline surveillance"))
sc2_list$sequenced_by <- "Lauring Lab, University of Michigan, Department of Microbiology and Immunology"
sc2_list$passage_method <- "not applicable"
sc2_list$passage_number <- "not applicable"
sra_sc2_sub <- sc2_list %>% select(sample_name, organism, collected_by,
collection_date, geo_loc_name, host,
host_disease, isolate, isolation_source,
gisaid_accession, gisaid_virus_name, passage_method,
passage_number, purpose_of_sampling, sequenced_by)
View(sc2_list)
sra_sc2_sub <- sc2_list %>% select(sample_name, organism, collected_by,
collection_date, geo_loc_name, host,
host_disease, isolate, isolation_source,
gisaid_accession, gisaid_virus_name, passage_method,
passage_number, purpose_of_sampling, sequenced_by)
sc2_list <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv")
### select plate
table(filter(sc2_list, received_source == "IVYIC")$PlateName)
sc2_list <- filter(sc2_list, received_source == "IVYIC" & PlateName == "20220720_SC2_Illumina_Run_58")
### IVYIC and MHOME for now
sc2_list$state_loc <- substr(sc2_list$SiteName, nchar(sc2_list$SiteName) - 1, nchar(sc2_list$SiteName))
sc2_list$state_loc <- state.name[match(sc2_list$state_loc,state.abb)]
sc2_list <- sc2_list %>% mutate(sample_name = case_when(received_source == "IVYIC" ~ paste0("IVYIC-", sample_id),
received_source == "MHOME" ~ paste0("UM-", sample_id),
T ~ ""),
collected_by = case_when(received_source == "IVYIC" ~ SiteName, # Name of person or institute who collected the sample
received_source == "MHOME" ~ "Martin/Lauring Laboratory - University of Michigan",
T ~ ""),
geo_loc_name = case_when(received_source == "IVYIC" ~ paste0("USA: ", state_loc),
received_source == "MHOME" ~ "USA: Michigan",
T ~ ""),
isolate = case_when(received_source == "IVYIC" ~ subject_id,
received_source == "MHOME" ~ subject_id, # can we use that here?
T ~ ""))
sc2_list$organism <- "SARS-CoV-2"
sc2_list$collection_date <- sc2_list$coll_date
sc2_list$host <- "Homo sapiens"
sc2_list$host_disease <- "COVID-19"
sc2_list$isolation_source <- "patient isolate"
sc2_list$gisaid_accession <- sc2_list$gisaid_epi_isl
sc2_list$gisaid_virus_name <- sc2_list$gisaid_strain
sc2_list <- sc2_list %>% mutate(purpose_of_sampling = case_when(sample_per_subject > 1 ~ "Warning",
received_source %in% c("CDCIVY", "MHOME") ~ "",
grepl("PUI", flag) ~ "",
received_source == "RVTN" ~ "Research",
received_source == "IVYIC" ~ "Serial sampling",
T ~ "Baseline surveillance"))
sc2_list$sequenced_by <- "Lauring Lab, University of Michigan, Department of Microbiology and Immunology"
sc2_list$passage_method <- "not applicable"
sc2_list$passage_number <- "not applicable"
sra_sc2_sub <- sc2_list %>% select(sample_name, organism, collected_by,
collection_date, geo_loc_name, host,
host_disease, isolate, isolation_source,
gisaid_accession, gisaid_virus_name, passage_method,
passage_number, purpose_of_sampling, sequenced_by)
View(sra_sc2_sub)
sc2_list <- filter(sc2_list, gisaid_accession != "")
library(tidyverse)
library(lubridate)
#### read in full sars-cov-2
sc2_list <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv")
### select plate
table(filter(sc2_list, received_source == "IVYIC")$PlateName)
sc2_list <- filter(sc2_list, received_source == "IVYIC" & PlateName == "20220720_SC2_Illumina_Run_58")
### IVYIC and MHOME for now
sc2_list$state_loc <- substr(sc2_list$SiteName, nchar(sc2_list$SiteName) - 1, nchar(sc2_list$SiteName))
sc2_list$state_loc <- state.name[match(sc2_list$state_loc,state.abb)]
sc2_list <- sc2_list %>% mutate(sample_name = case_when(received_source == "IVYIC" ~ paste0("IVYIC-", sample_id),
received_source == "MHOME" ~ paste0("UM-", sample_id),
T ~ ""),
collected_by = case_when(received_source == "IVYIC" ~ SiteName, # Name of person or institute who collected the sample
received_source == "MHOME" ~ "Martin/Lauring Laboratory - University of Michigan",
T ~ ""),
geo_loc_name = case_when(received_source == "IVYIC" ~ paste0("USA: ", state_loc),
received_source == "MHOME" ~ "USA: Michigan",
T ~ ""),
isolate = case_when(received_source == "IVYIC" ~ "not applicable",
received_source == "MHOME" ~ "not applicable" # leaving subject-id out
T ~ ""))
sc2_list$organism <- "SARS-CoV-2"
sc2_list$collection_date <- sc2_list$coll_date
sc2_list$host <- "Homo sapiens"
sc2_list$host_disease <- "COVID-19"
sc2_list$isolation_source <- "patient isolate"
sc2_list$gisaid_accession <- sc2_list$gisaid_epi_isl
sc2_list$gisaid_virus_name <- sc2_list$gisaid_strain
sc2_list <- sc2_list %>% mutate(purpose_of_sampling = case_when(sample_per_subject > 1 ~ "Warning",
received_source %in% c("CDCIVY", "MHOME") ~ "",
grepl("PUI", flag) ~ "",
received_source == "RVTN" ~ "Research",
received_source == "IVYIC" ~ "Serial sampling",
T ~ "Baseline surveillance"))
sc2_list$sequenced_by <- "Lauring Lab, University of Michigan, Department of Microbiology and Immunology"
sc2_list$passage_method <- "not applicable"
sc2_list$passage_number <- "not applicable"
sc2_list <- filter(sc2_list, gisaid_accession != "")
sra_sc2_sub <- sc2_list %>% select(sample_name, organism, collected_by,
collection_date, geo_loc_name, host,
host_disease, isolate, isolation_source,
gisaid_accession, gisaid_virus_name, passage_method,
passage_number, purpose_of_sampling, sequenced_by)
#### read in full sars-cov-2
sc2_list <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv")
### select plate
table(filter(sc2_list, received_source == "IVYIC")$PlateName)
sc2_list <- filter(sc2_list, received_source == "IVYIC" & PlateName == "20220720_SC2_Illumina_Run_58")
### IVYIC and MHOME for now
sc2_list$state_loc <- substr(sc2_list$SiteName, nchar(sc2_list$SiteName) - 1, nchar(sc2_list$SiteName))
sc2_list$state_loc <- state.name[match(sc2_list$state_loc,state.abb)]
sc2_list <- sc2_list %>% mutate(sample_name = case_when(received_source == "IVYIC" ~ paste0("IVYIC-", sample_id),
received_source == "MHOME" ~ paste0("UM-", sample_id),
T ~ ""),
collected_by = case_when(received_source == "IVYIC" ~ SiteName, # Name of person or institute who collected the sample
received_source == "MHOME" ~ "Martin/Lauring Laboratory - University of Michigan",
T ~ ""),
geo_loc_name = case_when(received_source == "IVYIC" ~ paste0("USA: ", state_loc),
received_source == "MHOME" ~ "USA: Michigan",
T ~ ""),
isolate = case_when(received_source == "IVYIC" ~ "not applicable",
received_source == "MHOME" ~ "not applicable", # leaving subject-id out
T ~ ""))
sc2_list$organism <- "SARS-CoV-2"
sc2_list$collection_date <- sc2_list$coll_date
sc2_list$host <- "Homo sapiens"
sc2_list$host_disease <- "COVID-19"
sc2_list$isolation_source <- "patient isolate"
sc2_list$gisaid_accession <- sc2_list$gisaid_epi_isl
sc2_list$gisaid_virus_name <- sc2_list$gisaid_strain
sc2_list <- sc2_list %>% mutate(purpose_of_sampling = case_when(sample_per_subject > 1 ~ "Warning",
received_source %in% c("CDCIVY", "MHOME") ~ "",
grepl("PUI", flag) ~ "",
received_source == "RVTN" ~ "Research",
received_source == "IVYIC" ~ "Serial sampling",
T ~ "Baseline surveillance"))
sc2_list$sequenced_by <- "Lauring Lab, University of Michigan, Department of Microbiology and Immunology"
sc2_list$passage_method <- "not applicable"
sc2_list$passage_number <- "not applicable"
sc2_list <- filter(sc2_list, gisaid_accession != "")
sra_sc2_sub <- sc2_list %>% select(sample_name, organism, collected_by,
collection_date, geo_loc_name, host,
host_disease, isolate, isolation_source,
gisaid_accession, gisaid_virus_name, passage_method,
passage_number, purpose_of_sampling, sequenced_by)
shiny::runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('~/UofM_Work/wander/wander_plot_community')
setwd("C:/Users/juliegil/Documents/UofM_Work/wander/wander_plot_community")
runApp()
#lfp <- "/Volumes/SPHStaging/SPHCOVIDBox/Box/COVID Response Modeling"
lfp <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response"
dataDate <- as.Date("2022-10-07")
library(openxlsx)
library(reshape2)
library(tidyverse)
library(lubridate)
#lfp <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response"
#dataDate <- as.Date("2022-06-08")
starting_date <- as_date("2022-03-03")
ending_date <- dataDate
#as_date("2022-03-11")
full_admission_set <- data.frame()
for (i in as.character(seq(starting_date, ending_date, by = 1))){
file_path <- paste0(lfp, "/Data - Healthcare/", as.character(i), "/")
cond <- sapply(list.files(file_path), function(x) grepl("Admission", x))
file_name <- list.files(file_path)[cond]
admits <- read.xlsx(paste0(file_path, file_name), sheet = 2)
admits <- admits[, c(1:30)]
admits$Date <- substr(file_name, 1, 10)
#admits <- filter(admits, !grepl(" ED", `Region/County`) & !grepl(" Psych", `Region/County`) & !grepl("- Specialty", `Region/County`))
#admits <- filter(admits, !is.na(Facility))
admit_melt <- reshape2::melt(admits, id.vars = c("Region/County", "Facility", "Date"))
admit_melt <- filter(admit_melt, !grepl("vaccina", tolower(variable)))
admit_melt <- admit_melt %>% mutate(age_group = case_when(grepl("5-11", tolower(variable)) | grepl("0.-.11", tolower(variable))
| grepl("0-4", tolower(variable)) | grepl("12.-.17", tolower(variable)) ~ "Pediatrics Breakout",
grepl("ped", tolower(variable)) ~ "Pediatrics",
T ~ "Adults"),
covid_status = case_when(grepl("suspect", tolower(variable)) ~ "Suspected",
grepl("vaccin", tolower(variable)) ~ "Vaccination Status",
T ~ "Confirmed"))
admit_melt <- filter(admit_melt, covid_status != "Vaccination Status" & age_group != "Pediatrics Breakout")
admit_melt$value <- as.numeric(admit_melt$value)
admit_melt2 <- admit_melt %>% group_by(Facility, Date, covid_status, age_group) %>% summarize(total = sum(value, na.rm = TRUE))
full_admission_set <- rbind(full_admission_set, admit_melt2)
}
old_admits <- read.csv(paste0(lfp, "/Data - Healthcare/admissions_past_data/previous_admits.csv"))
full_admission_set <- rbind(full_admission_set, old_admits)
full_admission_set <- filter(full_admission_set, !is.na(Facility))
### read in hospital to county mapping
hosp_county_map <- read.xlsx(paste0(lfp, "/Data - Healthcare/EMResource Hospitals by County_10032020.xlsx"), sheet = 1)
hosp_county_map <- hosp_county_map[, c(2, 6)]
full_admission_set$match <- ifelse(trimws(tolower(full_admission_set$Facility)) %in% tolower(trimws(hosp_county_map$Hospital.Name)), 1, 0)
if (any(full_admission_set$match == 0)){
message(unique(filter(full_admission_set, match == 0)$Facility))
stop("Hospital in set that doesn't have a match.")
}
full_admission_set$match_facility <- trimws(tolower(full_admission_set$Facility))
hosp_county_map$match_facility <- tolower(trimws(hosp_county_map$Hospital.Name))
full_admission_set <- merge(full_admission_set, hosp_county_map, by = c("match_facility"), all.x = TRUE, all.y = FALSE)
### get CONFIRMED, ADULT + PEDIATRICS, hospital admissions by county
fas <- filter(full_admission_set, covid_status == "Confirmed") %>% group_by(Date, County) %>% summarize(total_peds_and_adult = sum(total, na.rm = TRUE))
fas <- filter(fas, !is.na(County))
# wrap out and add zeros
fas2 <- reshape2::dcast(fas, County ~ Date, value.var = c("total_peds_and_adult"))
fas2[is.na(fas2)] <- 0
fas <- melt(fas2, id.vars = c("County"))
colnames(fas) <- c("County", "Date", "total_peds_and_adult")
#  & age_group == "Adults"
#fas <- filter(full_admission_set, covid_status == "Confirmed") %>% group_by(Date, County, age_group) %>% summarize(total_admits = sum(total, na.rm = TRUE))
#  & age_group == "Adults"
### read in county populations
county_pops <- read.csv(paste0(lfp, "/StatePipeline_Update_20211004/standard_files/michigan_merc_region_county_crosswalk_populations_byCounty_withDetCity.csv"))
county_to_merc <- county_pops %>% select(County.Name, MERC.Region.Name)
county_pops <- county_pops %>% select(County.Name, X2019_5y_Pop)
colnames(county_pops) <- c("County", "Pop2019")
county_pops <- filter(county_pops, !County %in% c("Wayne", "Detroit City"))
county_pops <- rbind(county_pops, c("Wayne", 1749342.979))
county_pops$Pop2019 <- as.numeric(county_pops$Pop2019)
state_pop <- county_pops %>% mutate(County = "State") %>% group_by(County) %>% summarize(state_population = sum(Pop2019, na.rm = TRUE))
fas <- merge(fas, county_pops, by = c("County"), all.x = TRUE, all.y = TRUE)
# wrap out and add zeros
fas2 <- reshape2::dcast(fas, County + Pop2019 ~ Date, value.var = c("total_peds_and_adult"))
fas2[is.na(fas2)] <- 0
fas <- melt(fas2, id.vars = c("County", "Pop2019"))
colnames(fas) <- c("County", "Pop2019", "Date", "total_peds_and_adult")
fas_state <- fas %>% mutate(County = "State")
fas_state <- merge(fas_state, state_pop, by = c("County"), all.x = TRUE)
fas <- merge(fas, county_to_merc, by.x = c("County"), by.y = c("County.Name"), all.x = TRUE, all.y = FALSE)
fas_merc_region <- fas %>% group_by(MERC.Region.Name, Date) %>% summarize(total_peds_and_adult = sum(total_peds_and_adult, na.rm = TRUE),
merc_population = sum(Pop2019, na.rm = TRUE))
### calculate 7 day sum of admissions
fas_merc_region <- fas_merc_region %>% group_by(MERC.Region.Name) %>% arrange(Date) %>% mutate(rolling_seven_day_total = zoo::rollsum(total_peds_and_adult, k = 7, fill = NA, align = c("right")))
### calculation total per 100,000 population
fas_merc_region <- fas_merc_region %>% mutate(seven_day_total_per_100K = (rolling_seven_day_total / merc_population) * 100000)
fas_state <- fas_state %>% group_by(County, Date) %>% summarize(total_peds_and_adult = sum(total_peds_and_adult, na.rm = TRUE),
state_population = unique(state_population))
### calculate 7 day sum of admissions
fas_state <- fas_state %>% group_by(County) %>% arrange(Date) %>% mutate(rolling_seven_day_total = zoo::rollsum(total_peds_and_adult, k = 7, fill = NA, align = c("right")))
### calculation total per 100,000 population
fas_state <- fas_state %>% mutate(seven_day_total_per_100K = (rolling_seven_day_total / state_population) * 100000)
colnames(fas_state) <- c("MERC.Region.Name", "Date", "total_peds_and_adult",
"merc_population", "rolling_seven_day_total", "seven_day_total_per_100K")
fas_merc_region <- rbind(fas_merc_region, fas_state)
################################################################################
full_healthcare_set <- read.csv(paste0(lfp, "/Data - Healthcare/full_summary/hc_summary_data.csv"), stringsAsFactors = FALSE) %>% mutate(facility = trimws(facility)) %>% distinct()
full_healthcare_set <- full_healthcare_set %>% select(DATE, facility, MERC.Region.Number, County,
adultconfirmedpositivecovid, adulthospitalinpatientbeds,
hospitalizedpedconfirmedpositive, allinpatientpediatricbeds )
full_healthcare_state <- full_healthcare_set
full_healthcare_state <- full_healthcare_state %>% mutate(County = "State")
full_healthcare_set <- filter(full_healthcare_set, County != "")
#full_healthcare_set <- merge(full_healthcare_set, hsa_match, by = c("County"), all.x = TRUE)
full_healthcare_set <- merge(full_healthcare_set, county_to_merc, by.x = c("County"), by.y = c("County.Name"), all.x = TRUE)
full_healthcare_state <- merge(full_healthcare_state, state_pop, by = c("County"))
full_healthcare_set$adulthospitalinpatientbeds[is.na(full_healthcare_set$adulthospitalinpatientbeds)] <- 0
full_healthcare_set$adulthospitalinpatientbeds[full_healthcare_set$adulthospitalinpatientbeds == ""] <- 0
full_healthcare_set$allinpatientpediatricbeds[is.na(full_healthcare_set$allinpatientpediatricbeds)] <- 0
full_healthcare_set$allinpatientpediatricbeds[full_healthcare_set$allinpatientpediatricbeds == ""] <- 0
full_healthcare_set <- full_healthcare_set %>% mutate(adults_plus_peds_covid = case_when(as_date(DATE) >= as_date("2022-01-30") ~ as.numeric(adultconfirmedpositivecovid) + as.numeric(hospitalizedpedconfirmedpositive),
T ~ as.numeric(adultconfirmedpositivecovid)))
full_healthcare_set <- full_healthcare_set %>% mutate(adults_plus_peds_beds = as.numeric(adulthospitalinpatientbeds) + as.numeric(allinpatientpediatricbeds))
merc_inpatient <- full_healthcare_set %>% group_by(DATE, MERC.Region.Name) %>% summarize(adults_plus_peds_covid_merc = sum(adults_plus_peds_covid, na.rm = TRUE),
adults_plus_peds_beds_merc = sum(adults_plus_peds_beds, na.rm = TRUE))
merc_inpatient[is.na(merc_inpatient)] <- 0
merc_inpatient <- merc_inpatient %>% group_by(MERC.Region.Name) %>% arrange(DATE) %>% mutate(sum7_covid_merc = zoo::rollsum(adults_plus_peds_covid_merc, 7, fill = NA, align = c("right")),
sum7_beds_merc = zoo::rollsum(adults_plus_peds_beds_merc, 7, fill = NA, align = c("right")))
merc_inpatient <- merc_inpatient %>% mutate(average_inpatient_percent_full = (sum7_covid_merc / sum7_beds_merc)*100)
full_healthcare_state <- full_healthcare_state %>% mutate(adults_plus_peds_covid = case_when(as_date(DATE) >= as_date("2022-01-30") ~ as.numeric(adultconfirmedpositivecovid) + as.numeric(hospitalizedpedconfirmedpositive),
T ~ as.numeric(adultconfirmedpositivecovid)))
full_healthcare_state <- filter(full_healthcare_state, adulthospitalinpatientbeds != "HHS: Adult Hospital Inpatient Beds")
full_healthcare_state$adulthospitalinpatientbeds[is.na(full_healthcare_state$adulthospitalinpatientbeds)] <- 0
full_healthcare_state$adulthospitalinpatientbeds[full_healthcare_state$adulthospitalinpatientbeds == ""] <- 0
full_healthcare_state$allinpatientpediatricbeds[is.na(full_healthcare_state$allinpatientpediatricbeds)] <- 0
full_healthcare_state$allinpatientpediatricbeds[full_healthcare_state$allinpatientpediatricbeds == ""] <- 0
full_healthcare_state <- full_healthcare_state %>% mutate(adults_plus_peds_beds = as.numeric(adulthospitalinpatientbeds) + as.numeric(allinpatientpediatricbeds))
state_inpatient <- full_healthcare_state %>% group_by(DATE, County) %>% summarize(adults_plus_peds_covid_state = sum(adults_plus_peds_covid, na.rm = TRUE),
adults_plus_peds_beds_state = sum(adults_plus_peds_beds, na.rm = TRUE))
state_inpatient <- state_inpatient %>% group_by(County) %>% arrange(DATE) %>% mutate(sum7_covid_state = zoo::rollsum(adults_plus_peds_covid_state, 7, fill = NA, align = c("right")),
sum7_beds_state = zoo::rollsum(adults_plus_peds_beds_state, 7, fill = NA, align = c("right")))
state_inpatient <- state_inpatient %>% mutate(average_inpatient_percent_full = (sum7_covid_state / sum7_beds_state)*100)
colnames(state_inpatient) <- c("DATE", "MERC.Region.Name", "adults_plus_peds_covid_state",
"adults_plus_peds_beds_state", "sum7_covid_state", "sum7_beds_state",
"average_inpatient_percent_full")
merc_inpatient <- rbind(merc_inpatient, state_inpatient)
# ggplot(filter(merc_inpatient, as_date(DATE) >= as_date("2022-01-30")), aes(x = as_date(DATE), y = average_inpatient_percent_full)) +
#   geom_point()
#a <- filter(hsa_inpatient, HAS == 274)
### cdc hospital metrics
cdc_hosp_metrics <- merge(fas_merc_region, merc_inpatient, by.x = c("Date", "MERC.Region.Name"), by.y = c("DATE", "MERC.Region.Name"), all = TRUE)
### read in case data
cases_report <- read.csv(paste0(lfp, "/CDC_RiskLevels/CDC_FINALS/cases100000report_withMDOC.csv"))
cases_report <- filter(cases_report, Area %in% c("MERC.1", "MERC.2", "MERC.3", "MERC.4", "MERC.5",
"MERC.6", "MERC.7", "MERC.8", "Michigan"))
cases_report <- cases_report %>% mutate(Area = case_when(Area == "MERC.1" ~ "Detroit",
Area == "MERC.2" ~ "Grand Rapids",
Area == "MERC.3" ~ "Kalamazoo",
Area == "MERC.4" ~ "Saginaw",
Area == "MERC.5" ~ "Lansing",
Area == "MERC.6" ~ "Traverse City",
Area == "MERC.7" ~ "Jackson",
Area == "MERC.8" ~ "Upper Peninsula",
Area == "Michigan" ~ "State",
T ~ "Unknown"))
cdc_hosp_case <- merge(cdc_hosp_metrics, cases_report, by.x = c("Date", "MERC.Region.Name"), by.y = c("Date", "Area"))
#cdc_hosp_case <- filter(cdc_hosp_case, as_date(Date) >= as_date("2022-01-30"))
library("RSocrata")
# pull entire us cdc community level data
#test <- read.socrata("https://data.cdc.gov/resource/3nnm-4jni.json")
# pull michigan cdc community data
testMI <- read.socrata("https://data.cdc.gov/resource/3nnm-4jni.json?state=Michigan")
michigan_case_community_data <- testMI %>% select(date_updated, county, covid_cases_per_100k, covid_inpatient_bed_utilization, covid_hospital_admissions_per_100k, covid_19_community_level)
michigan_case_community_data$county <- gsub(", Michigan, US", "", michigan_case_community_data$county)
michigan_case_community_data$county <- gsub(" County, MI", "", michigan_case_community_data$county)
cdc_hosp_keep <- cdc_hosp_case %>% select(Date, MERC.Region.Name, SevenDayNewCasesSumPer100000,
average_inpatient_percent_full, seven_day_total_per_100K)
cdc_hosp_keep <- cdc_hosp_keep %>% mutate(MERC.Region.Name = case_when(MERC.Region.Name != "State" ~ paste0(MERC.Region.Name, " Region"),
MERC.Region.Name == "State" ~ "State",
T ~ "Unknown"))
cdc_hosp_keep$level <- ifelse(cdc_hosp_keep$SevenDayNewCasesSumPer100000 > 200 & cdc_hosp_keep$average_inpatient_percent_full < 10 & cdc_hosp_keep$seven_day_total_per_100K < 10, "Medium",
ifelse(cdc_hosp_keep$SevenDayNewCasesSumPer100000 > 200 & (cdc_hosp_keep$average_inpatient_percent_full >= 10 | cdc_hosp_keep$seven_day_total_per_100K >= 10), "High",
ifelse(cdc_hosp_keep$SevenDayNewCasesSumPer100000 < 200 & cdc_hosp_keep$average_inpatient_percent_full < 10 & cdc_hosp_keep$seven_day_total_per_100K < 10, "Low",
ifelse(cdc_hosp_keep$SevenDayNewCasesSumPer100000 < 200 & cdc_hosp_keep$average_inpatient_percent_full >= 15 & cdc_hosp_keep$seven_day_total_per_100K >= 20, "High", "Medium"))))
colnames(cdc_hosp_keep) <- c("date_updated", "county", "covid_cases_per_100k",
"covid_inpatient_bed_utilization", "covid_hospital_admissions_per_100k",
"covid_19_community_level")
cdc_out <- rbind(michigan_case_community_data, cdc_hosp_keep)
colnames(cdc_out) <- c("date", "area", "covid_cases_per_100k",
"covid_inpatient_bed_utilization", "covid_hospital_admissions_per_100k",
"covid_19_community_level")
# take out any instances where level call is NA
cdc_out <- filter(cdc_out, !is.na(covid_19_community_level))
# if the area == Region or == State, replace level call with NA
cdc_out <- cdc_out %>% mutate(covid_19_community_level = case_when((grepl("State", area) | grepl("Region", area)) & as_date(date) < as_date("2022-01-30") ~ NA_character_,
T ~ covid_19_community_level))
cdc_out[is.na(cdc_out)] <- ""
write.csv(cdc_out, paste0(lfp, "/Data - Healthcare/admissions_past_data/sample_cdc_community_data_", gsub("-", "", ending_date), ".csv"), row.names = FALSE, na = "")
write.csv(cdc_out, paste0(lfp, "/Data - Healthcare/admissions_past_data/sample_cdc_community_data.csv"), row.names = FALSE, na = "")
runApp()
getwd()
