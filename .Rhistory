runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
runApp('C:/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/SARSCOV2/IVYIC_VariantMapping/variant_mapping/variant_ivyic')
library(sf)
library(tidyverse)
library(leaflet)
library(tidyverse)
library(htmlwidgets)
library(tidycensus)
library(lubridate)
### wastewater shape files
# census_api_key("bdadb17ac3cdebcc23518a2367b622f8bcc24084")
# county_geo <- get_acs(state = "MI", geography = "county",
#                       variables = "B19013_001", geometry = TRUE)
#
# county_geo$NAME2 <- gsub(" County, Michigan", "", county_geo$NAME)
# county_geo$NAME2 <- gsub("\\.", "", county_geo$NAME2)
lfp <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response"
if (weekdays(Sys.Date()) %in% c("Tuesday", "Thursday", "Saturday")){
dataDate <- Sys.Date() - 1
} else if (weekdays(Sys.Date()) == "Monday"){
dataDate <- Sys.Date() - 3
} else {
dataDate <- Sys.Date() - 2
}
dataDate <- as_date("2022-09-27")
### case data
cases <- read.csv(paste0(lfp, "/Data - MDHHS/",gsub("-0","-",format(dataDate,"%y-%m-%d")), "/Confirmed and Probable Covid19 Cases ", dataDate, ".csv"))
#cases <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Data - MDHHS/22-1-19/Confirmed and Probable Covid19 Cases 2022-01-19.csv")
## select columns to work with, to improve processing time as this file has gotten large
data <- cases %>% select(InvestigationID, Case_Status, State_Prison_Case,
Onset_Date, Diagnosis_Date, Referral_Date, Case_Entry_Date, Case_Disposition,
Patient_Status, Patient_Status_Date, Patient_ID, Age, Age_Units,
Sex_at_Birth, Race, Hispanic_Ethnicity, Arab_Ethnicity,
City, State, Zip, County, Patient_Hospitalized,
Admission_Date, Discharge_Date, Days_Hospitalized, Patient_Died,
Date_of_Death, CovidTest, Health_care_worker_in_the_US,
CovidTestDate, CovidResult, Investigation_Addr_Geo_X, Investigation_Addr_Geo_Y) %>% distinct()
################################################################################
# Load in functions
source(paste0(lfp, "/Data - MDHHS/dashboard_scripts/DashboardFunctions/demographic_variable_processing.R"))
source(paste0(lfp, "/Data - MDHHS/dashboard_scripts/DashboardFunctions/major_mdhhs_function_v2.R"))
# =========== Reformat Dates ==================
data <- date_reformatting(data)
#####
# table(is.na(filter(data, Case_Status == "Confirmed")$Onset_Date))
# table(is.na(filter(data, Case_Status == "Confirmed")$Onset_Date), is.na(filter(data, Case_Status == "Confirmed")$CovidTestDate))
missing_date_info <- filter(data, Case_Status == "Confirmed" & County %in% c("Washetenaw", "Jackson", "Genesee", "Lenawee", "Wayne")) %>% group_by(County) %>% mutate(onset_na = case_when(is.na(Onset_Date) ~ 1,
T ~ 0),
test_na = case_when(is.na(CovidTestDate) ~ 1,
T ~ 0),
referral_na = case_when(is.na(Referral_Date) ~ 1,
T ~ 0))
table(missing_date_info$onset_na)
table(missing_date_info$onset_na, missing_date_info$test_na)
table(is.na(missing_date_info$Investigation_Addr_Geo_X))
### data check: if all the dates used in the next variable creation step
# are missing, stop the code run
if(all(is.na(data$Onset_Date))){
stop("All Onset_Date are missing.")
}
if(all(is.na(data$Referral_Date))){
stop("All Referral_Date are missing.")
}
if(all(is.na(data$CovidTestDate))){
stop("All CovidTestDate are missing.")
}
# create new date variable based on logic from Sarah Rockhill
# see Box\COVID Response Modeling\Data - MDHHS\state_data_pipeline_documentation\Notes_and_Other.docx for more info
data <- date_fill_order(data)
# if all the dates for the next date manipulation are missing, stop the code
if(all(is.na(data$Patient_Status_Date))){
stop("All Patient_Status_Date are missing.")
}
if(all(is.na(data$Date_of_Death))){
stop("All Date_of_Death are missing.")
}
# change "Date_of_Death" to "DateDeath"
data$DateDeath <- data$Date_of_Death
# if DateDeath is missing, fill it with Patient_Status_Date
data$DateDeath[is.na(data$DateDeath)] <- data$Patient_Status_Date[is.na(data$DateDeath)]
# Remove any rows where all the individual's main date values are missing (at this point,
# if all their dates are missing, the "Date" variable will be NA)
data <- data[which(!is.na(data$Date)),]
data <- data %>% mutate(
age_years = case_when(Age_Units %in% c("D") ~ 0,
Age_Units == "M" & Age < 12 ~ 0,
Age_Units == "M" & Age >= 12 & Age < 24 ~ 1,
T ~ as.numeric(Age)),
County = case_when(is.na(County) ~ "Unknown",
T ~ County))
death_row_selection <- function(chosen_df){
# select rows where either Patient_Died, Patient_Status, or Case_Disposition is "D" and not null
only_deaths <- chosen_df[(chosen_df$Patient_Died == "D" & !is.na(chosen_df$Patient_Died)) |
(chosen_df$Patient_Status == "D" & !is.na(chosen_df$Patient_Status)) |
(chosen_df$Case_Disposition == "D" & !is.na(chosen_df$Case_Disposition)), ]
return(only_deaths)
}
#data <- death_row_selection(data) %>% select(Date, County, InvestigationID, Case_Status, Investigation_Addr_Geo_X, Investigation_Addr_Geo_Y)
data <- data %>% select(Date, County, InvestigationID, Case_Status, Investigation_Addr_Geo_X, Investigation_Addr_Geo_Y)
data$nolatlong <- ifelse(is.na(data$Investigation_Addr_Geo_X) | is.na(data$Investigation_Addr_Geo_Y), 1, 0)
####
#table(filter(data, Case_Status == "Confirmed")$nolatlong)
################################################################################
flint_pop <- 95999 # ACS 5y estimate 2020 city
jackson_pop <- 90000 # from ww site (ACS 5y 2020 city = 32251)
ypsilanti_pop <- 330000 # from ww site (ACS 5y 2020 city = 20792)
tecumseh_pop <- 8680 # from ww site (ACS 5y 2020 city = 8361)
annarbor_pop <- 121093 # ACS 5y estimate 2020 city plus student body
# flint
source(paste0(lfp, "/Jules/Cases_WWregions_forKevin/city_of_flint_shp/code_shp_to_case_count.R"))
# jackson
source(paste0(lfp, "/Jules/Cases_WWregions_forKevin/jackson_shp/code_shp_to_case_count2.R"))
# ypsilanti
source(paste0(lfp, "/Jules/Cases_WWregions_forKevin/ycua_shp/code_shp_to_case_count5.R"))
# ann arbor
source(paste0(lfp, "/Jules/Cases_WWregions_forKevin/ann_arbor_shp/code_shp_to_case_count8.R"))
# tecumseh
source(paste0(lfp, "/Jules/Cases_WWregions_forKevin/tecumseh_shp/code_shp_to_case_count7.R"))
library(tidyverse)
library(lubridate)
library(janitor)
gisaid_storage <- read.delim("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Jules/Cases_WWregions_forKevin/extras/variant_zone_determination/metadata_20220926.tsv")
rsconnect::setAccountInfo(name='umich-biostatistics',
token='1B6B254C568A4D2D8330B50C6F78E3BC',
secret='ln1//jXpvh3+i7YFzbiYUXZ85zgBNL7FF+lltpIV')
setwd()
getwd()
setwd("C:/Users/juliegil/Documents/UofM_Work/wander/wander_plot_community")
getwd()
rsconnect::setAccountInfo(name='umich-biostatistics',
token='1B6B254C568A4D2D8330B50C6F78E3BC',
secret='ln1//jXpvh3+i7YFzbiYUXZ85zgBNL7FF+lltpIV')
model4 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust, data = case_ww_test)
library(tidyverse)
library(lubridate)
library(ggpubr)
covid_case_data_path <- "C:/Users/juliegil/Dropbox (University of Michigan)/"
covid_case_data_path <- paste0(covid_case_data_path, "SPH-COVID Response/Jules/Cases_WWregions_forKevin/extras/covid_case_files/")
### Read in case data files, bind together into one set
flint_covid_cases <- read.csv(paste0(covid_case_data_path, "flint_out_20220927.csv"))
ycua_covid_cases <- read.csv(paste0(covid_case_data_path, "ycua_out_20220927.csv"))
tecumseh_covid_cases <- read.csv(paste0(covid_case_data_path, "tecumseh_out_20220927.csv"))
jackson_covid_cases <- read.csv(paste0(covid_case_data_path, "jackson_out_20220927.csv"))
annarbor_covid_cases <- read.csv(paste0(covid_case_data_path, "annarbor_out_20220927.csv"))
flint_covid_cases$city_code <- "FL"
ycua_covid_cases$city_code <- "YC"
tecumseh_covid_cases$city_code <- "TM"
jackson_covid_cases$city_code <- "JS"
annarbor_covid_cases$city_code <- "AA"
covid_all <- rbind(flint_covid_cases, ycua_covid_cases, tecumseh_covid_cases, jackson_covid_cases, annarbor_covid_cases)
covid_ww_data <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Jules/Cases_WWregions_forKevin/extras/ww_data/covid_wastewater_data_all_cities_20220928.csv") %>% distinct()
covid_ww_data <- filter(covid_ww_data, type == "INFLUENT")
# merge ww data with case data
case_ww <- merge(covid_ww_data, covid_all, by.x = c("Date", "city"), by.y = c("Date", "city_code"))
case_ww <- case_ww %>% mutate(variant_timeline = case_when(Date >= as_date("2022-07-23") ~ "Omicron BA.5",
Date >= as_date("2022-03-28") & Date < as_date("2022-07-23") ~ "Omicron BA.2",
Date >= as_date("2022-01-16") & Date < as_date("2022-03-28") ~ "Omicron BA.1",
Date >= as_date("2021-06-27") & Date < as_date("2022-01-16") ~ "Delta",
Date >= as_date("2021-03-07") & Date < as_date("2021-06-27") ~ "Alpha",
T ~ "Original"),
city = case_when(city == "AA" ~ "Ann Arbor Catchment",
city == "FL" ~ "Flint Catchment",
city == "JS" ~ "Jackson Catchment",
city == "TM" ~ "Tecumseh Catchment",
city == "YC" ~ "Ypsilanti Catchment",
T ~ "Unknown"))
# read in testing data:
dataDate <- as_date("2022-09-27")
testing_data <- readxl::read_xlsx(paste0("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Data - SEOC/SEOC Testing Results ",format(dataDate,"%Y%m%d"),".xlsx"), sheet = "With Corrections")
testing_data2 <- readxl::read_xlsx(paste0("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Data - SEOC/SEOC Testing Results - Antigen ",format(dataDate,"%Y%m%d"),".xlsx"), sheet = "With Corrections")
# (ann arbor, flint, jackson, tecumseh, ycua = wayne + washtenaw)
counties_of_interest <- c("Washtenaw", "Genesee", "Jackson", "Lenawee", "Wayne")
testing_data <- filter(testing_data, Geography %in% counties_of_interest)
testing_data2 <- filter(testing_data2, Geography %in% counties_of_interest)
# calculate negative tests per 100K population
testing_data <- filter(testing_data) %>% group_by(Geography, MessageDate, Population2018) %>% summarize(NegativeTests = sum(NegativeTests, na.rm = TRUE))
testing_data2 <- filter(testing_data2) %>% group_by(Geography, MessageDate, Population2018) %>% summarize(NegativeTests = sum(NegativeTests, na.rm = TRUE))
### regular tests
testing_data <- testing_data %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(NegativeTests, k = 7, fill = NA, align = "right"))
testing_data$rolling_average_daily_negative_tests <- testing_data$rolling_sum_negative_tests / 7
### antigen tests
testing_data2 <- testing_data2 %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(NegativeTests, k = 7, fill = NA, align = "right"))
testing_data2$rolling_average_daily_negative_tests <- testing_data2$rolling_sum_negative_tests / 7
ggplot(testing_data, aes(x = as_date(MessageDate), y = rolling_average_daily_negative_tests)) +
geom_line(color = "red") +
geom_line(data = testing_data2, aes(x = as_date(MessageDate), y = rolling_average_daily_negative_tests), color = "blue") +
facet_wrap(.~Geography)
colnames(testing_data)
colnames(testing_data2) <- c("Geography", "MessageDate", "Population2018", "AntigenNegativeTests", "Antigen_rolling_sum", "Antigen_rolling_average")
all_testing <- merge(testing_data, testing_data2, by = c("Geography", "MessageDate", "Population2018"), all = TRUE)
all_testing <- all_testing %>% select(Geography, MessageDate, Population2018, NegativeTests, AntigenNegativeTests)
all_testing$TotalNegative <- all_testing$NegativeTests + all_testing$AntigenNegativeTests
all_testing <- all_testing %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(TotalNegative, k = 7, fill = NA, align = "right"))
all_testing$rolling_average_daily_negative_tests <- all_testing$rolling_sum_negative_tests / 7
all_testing$rolling_average_daily_negative_tests_pop_adjust <- (all_testing$rolling_average_daily_negative_tests / all_testing$Population2018) * 100000
################################################################################
#### model idea
# cases = ww + variant period + negative tests + pandemic year
# inverse of percent pos
# tests per case
# not independent
# first, need all data in one dataset, going to do ann arbor first
case_ww_use <- filter(case_ww, city == "Ann Arbor Catchment" & variable == "N1" & type == "INFLUENT" & Case_Status == "Confirmed")
case_ww_use <- case_ww_use %>% select(Date, city, variable, type, value, seven_day_rolling_average, Case_Status, count, seven_day_average_100k, variant_timeline)
testing_use <- filter(all_testing, Geography == "Washtenaw")
testing_use <- testing_use %>% select(Geography, MessageDate, TotalNegative, rolling_average_daily_negative_tests_pop_adjust)
testing_use$MessageDate <- as.character(testing_use$MessageDate)
case_ww_use$Date <- as.character(case_ww_use$Date)
case_ww_test <- merge(case_ww_use, testing_use, by.x = c("Date"), by.y = c("MessageDate"), all.x = TRUE)
case_ww_test$pandemic_year <- ifelse(year(as_date(case_ww_test$Date)) == 2020, 1,
ifelse(year(as_date(case_ww_test$Date)) == 2021, 2,
ifelse(year(as_date(case_ww_test$Date)) == 2022, 3, 0)))
colnames(case_ww_test)
# cases = ww + variant period + negative tests + pandemic year
model1 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust + pandemic_year, data = case_ww_test)
summary(model1) #Review the results
case_ww_test <- case_ww_test %>% mutate(model1_ww_value = seven_day_rolling_average * 73360,
model1_variant_value = case_when(variant_timeline == "Omicron BA.1" ~ -91.39,
variant_timeline == "Omicron BA.2" ~ -89.04,
variant_timeline == "Omicron BA.5" ~ -108.0,
T ~ 1),
model1_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.08016,
model1_pandemicyear_value = pandemic_year * 108.0)
case_ww_test$model1_overall <- -248.8 + case_ww_test$model1_ww_value + case_ww_test$model1_variant_value + case_ww_test$model1_negativetests_value + case_ww_test$model1_pandemicyear_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model1_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + variant period + negative tests + pandemic year")
model2 <- lm(seven_day_average_100k ~ seven_day_rolling_average + rolling_average_daily_negative_tests_pop_adjust, data = case_ww_test)
summary(model2) #Review the results
case_ww_test <- case_ww_test %>% mutate(model2_ww_value = seven_day_rolling_average * 101600.0,
model2_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.1096)
case_ww_test$model2_overall <- -45.32 + case_ww_test$model2_ww_value + case_ww_test$model2_negativetests_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model2_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + negative tests")
model3 <- lm(seven_day_average_100k ~ seven_day_rolling_average, data = case_ww_test)
summary(model3) #Review the results
case_ww_test <- case_ww_test %>% mutate(model3_ww_value = seven_day_rolling_average * 101500.0)
case_ww_test$model3_overall <- 0.08366 + case_ww_test$model3_ww_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model3_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww")
ggplot(case_ww_test) +
geom_line(aes(x = as_date(Date), y = seven_day_average_100k/100000), color = "springgreen", size = 1) +
geom_line(aes(x = as_date(Date), y = seven_day_rolling_average), color = "dodgerblue", size = 1) +
geom_line(aes(x = as_date(Date), y = rolling_average_daily_negative_tests_pop_adjust/1000000), color = "violetred4", size = 1) +
theme_bw()
summary(case_ww_test$rolling_average_daily_negative_tests_pop_adjust)
case_ww_test <- case_ww_test %>% mutate(negative_test_levels = case_when(rolling_average_daily_negative_tests_pop_adjust < 256.9 ~ "Low",
rolling_average_daily_negative_tests_pop_adjust >= 256.9 & rolling_average_daily_negative_tests_pop_adjust < 400 ~ "Medium",
rolling_average_daily_negative_tests_pop_adjust >= 400 & rolling_average_daily_negative_tests_pop_adjust < 575.5 ~ "High",
rolling_average_daily_negative_tests_pop_adjust >= 575.5 ~ "Highest",
T ~ "Unknown"),
ww_levels = case_when(seven_day_rolling_average < 0.000121 ~ "Low",
seven_day_rolling_average >= 0.000121 & seven_day_rolling_average < 0.000376 ~ "Medium",
seven_day_rolling_average >= 0.000376 & seven_day_rolling_average < 0.000576 ~ "High",
seven_day_rolling_average >= 0.000576 ~ "Highest",
T ~ "Unknown"))
table(case_ww_test$negative_test_levels, case_ww_test$ww_levels)
##### what is the correlation when testing is "high" vs. testing is "low"
high_testing <- filter(case_ww_test, negative_test_levels == "Highest")
low_testing <- filter(case_ww_test, negative_test_levels == "Low")
cor(high_testing$seven_day_rolling_average, high_testing$seven_day_average_100k, use = "complete.obs")
# 0.9123864
cor(low_testing$seven_day_rolling_average, low_testing$seven_day_average_100k, use = "complete.obs")
# 0.7385588
case_ww_test$negative_test_levels <- factor(case_ww_test$negative_test_levels, levels = c("Low", "Medium", "High", "Highest"))
ggplot(case_ww_test, aes(x = seven_day_rolling_average, y = seven_day_average_100k,  color = negative_test_levels)) +
geom_point(size = 2, alpha = 0.6) +
stat_cor(r.digits = 3, aes(x = seven_day_rolling_average, y = seven_day_average_100k, color = negative_test_levels, group = negative_test_levels), inherit.aes = FALSE) +
theme_bw() +
labs(x = "Wastewater 7-Day Rolling Average N1 PMMoV Adjusted",
y = "COVID-19 Confirmed Case 7-Day Rolling Average per 100K Population",
color = "Testing Levels")
model4 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust, data = case_ww_test)
summary(model4) #Review the results
case_ww_test <- case_ww_test %>% mutate(model4_ww_value = seven_day_rolling_average * 115800.0,
model4_variant_value = case_when(variant_timeline == "Omicron BA.1" ~ 8.794,
variant_timeline == "Omicron BA.2" ~ 4.106,
variant_timeline == "Omicron BA.5" ~ -20.04,
T ~ 1),
model1_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.09240)
case_ww_test$model4_overall <- -42.17 + case_ww_test$model4_ww_value + case_ww_test$model4_variant_value + case_ww_test$model4_negativetests_value
case_ww_test <- case_ww_test %>% mutate(model4_ww_value = seven_day_rolling_average * 115800.0,
model4_variant_value = case_when(variant_timeline == "Omicron BA.1" ~ 8.794,
variant_timeline == "Omicron BA.2" ~ 4.106,
variant_timeline == "Omicron BA.5" ~ -20.04,
T ~ 1),
model4_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.09240)
case_ww_test$model4_overall <- -42.17 + case_ww_test$model4_ww_value + case_ww_test$model4_variant_value + case_ww_test$model4_negativetests_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model1_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + variant period + negative tests + pandemic year")
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model1_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + variant period + negative tests")
library(tidyverse)
library(lubridate)
library(ggpubr)
covid_case_data_path <- "C:/Users/juliegil/Dropbox (University of Michigan)/"
covid_case_data_path <- paste0(covid_case_data_path, "SPH-COVID Response/Jules/Cases_WWregions_forKevin/extras/covid_case_files/")
### Read in case data files, bind together into one set
flint_covid_cases <- read.csv(paste0(covid_case_data_path, "flint_out_20220927.csv"))
ycua_covid_cases <- read.csv(paste0(covid_case_data_path, "ycua_out_20220927.csv"))
tecumseh_covid_cases <- read.csv(paste0(covid_case_data_path, "tecumseh_out_20220927.csv"))
jackson_covid_cases <- read.csv(paste0(covid_case_data_path, "jackson_out_20220927.csv"))
annarbor_covid_cases <- read.csv(paste0(covid_case_data_path, "annarbor_out_20220927.csv"))
flint_covid_cases$city_code <- "FL"
ycua_covid_cases$city_code <- "YC"
tecumseh_covid_cases$city_code <- "TM"
jackson_covid_cases$city_code <- "JS"
annarbor_covid_cases$city_code <- "AA"
covid_all <- rbind(flint_covid_cases, ycua_covid_cases, tecumseh_covid_cases, jackson_covid_cases, annarbor_covid_cases)
covid_ww_data <- read.csv("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Jules/Cases_WWregions_forKevin/extras/ww_data/covid_wastewater_data_all_cities_20220928.csv") %>% distinct()
covid_ww_data <- filter(covid_ww_data, type == "INFLUENT")
# merge ww data with case data
case_ww <- merge(covid_ww_data, covid_all, by.x = c("Date", "city"), by.y = c("Date", "city_code"))
case_ww <- case_ww %>% mutate(variant_timeline = case_when(Date >= as_date("2022-07-23") ~ "Omicron BA.5",
Date >= as_date("2022-03-28") & Date < as_date("2022-07-23") ~ "Omicron BA.2",
Date >= as_date("2022-01-16") & Date < as_date("2022-03-28") ~ "Omicron BA.1",
Date >= as_date("2021-06-27") & Date < as_date("2022-01-16") ~ "Delta",
Date >= as_date("2021-03-07") & Date < as_date("2021-06-27") ~ "Alpha",
T ~ "Original"),
city = case_when(city == "AA" ~ "Ann Arbor Catchment",
city == "FL" ~ "Flint Catchment",
city == "JS" ~ "Jackson Catchment",
city == "TM" ~ "Tecumseh Catchment",
city == "YC" ~ "Ypsilanti Catchment",
T ~ "Unknown"))
# read in testing data:
dataDate <- as_date("2022-09-27")
testing_data <- readxl::read_xlsx(paste0("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Data - SEOC/SEOC Testing Results ",format(dataDate,"%Y%m%d"),".xlsx"), sheet = "With Corrections")
testing_data2 <- readxl::read_xlsx(paste0("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Data - SEOC/SEOC Testing Results - Antigen ",format(dataDate,"%Y%m%d"),".xlsx"), sheet = "With Corrections")
# (ann arbor, flint, jackson, tecumseh, ycua = wayne + washtenaw)
counties_of_interest <- c("Washtenaw", "Genesee", "Jackson", "Lenawee", "Wayne")
testing_data <- filter(testing_data, Geography %in% counties_of_interest)
testing_data2 <- filter(testing_data2, Geography %in% counties_of_interest)
# calculate negative tests per 100K population
testing_data <- filter(testing_data) %>% group_by(Geography, MessageDate, Population2018) %>% summarize(NegativeTests = sum(NegativeTests, na.rm = TRUE))
testing_data2 <- filter(testing_data2) %>% group_by(Geography, MessageDate, Population2018) %>% summarize(NegativeTests = sum(NegativeTests, na.rm = TRUE))
### regular tests
testing_data <- testing_data %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(NegativeTests, k = 7, fill = NA, align = "right"))
testing_data$rolling_average_daily_negative_tests <- testing_data$rolling_sum_negative_tests / 7
### antigen tests
testing_data2 <- testing_data2 %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(NegativeTests, k = 7, fill = NA, align = "right"))
testing_data2$rolling_average_daily_negative_tests <- testing_data2$rolling_sum_negative_tests / 7
ggplot(testing_data, aes(x = as_date(MessageDate), y = rolling_average_daily_negative_tests)) +
geom_line(color = "red") +
geom_line(data = testing_data2, aes(x = as_date(MessageDate), y = rolling_average_daily_negative_tests), color = "blue") +
facet_wrap(.~Geography)
colnames(testing_data)
colnames(testing_data2) <- c("Geography", "MessageDate", "Population2018", "AntigenNegativeTests", "Antigen_rolling_sum", "Antigen_rolling_average")
all_testing <- merge(testing_data, testing_data2, by = c("Geography", "MessageDate", "Population2018"), all = TRUE)
all_testing <- all_testing %>% select(Geography, MessageDate, Population2018, NegativeTests, AntigenNegativeTests)
all_testing$TotalNegative <- all_testing$NegativeTests + all_testing$AntigenNegativeTests
all_testing <- all_testing %>% group_by(Geography) %>% arrange(as_date(MessageDate)) %>% mutate(rolling_sum_negative_tests = zoo::rollsum(TotalNegative, k = 7, fill = NA, align = "right"))
all_testing$rolling_average_daily_negative_tests <- all_testing$rolling_sum_negative_tests / 7
all_testing$rolling_average_daily_negative_tests_pop_adjust <- (all_testing$rolling_average_daily_negative_tests / all_testing$Population2018) * 100000
################################################################################
#### model idea
# cases = ww + variant period + negative tests + pandemic year
# inverse of percent pos
# tests per case
# not independent
# first, need all data in one dataset, going to do ann arbor first
case_ww_use <- filter(case_ww, city == "Ann Arbor Catchment" & variable == "N1" & type == "INFLUENT" & Case_Status == "Confirmed")
case_ww_use <- case_ww_use %>% select(Date, city, variable, type, value, seven_day_rolling_average, Case_Status, count, seven_day_average_100k, variant_timeline)
testing_use <- filter(all_testing, Geography == "Washtenaw")
testing_use <- testing_use %>% select(Geography, MessageDate, TotalNegative, rolling_average_daily_negative_tests_pop_adjust)
testing_use$MessageDate <- as.character(testing_use$MessageDate)
case_ww_use$Date <- as.character(case_ww_use$Date)
case_ww_test <- merge(case_ww_use, testing_use, by.x = c("Date"), by.y = c("MessageDate"), all.x = TRUE)
case_ww_test$pandemic_year <- ifelse(year(as_date(case_ww_test$Date)) == 2020, 1,
ifelse(year(as_date(case_ww_test$Date)) == 2021, 2,
ifelse(year(as_date(case_ww_test$Date)) == 2022, 3, 0)))
colnames(case_ww_test)
# cases = ww + variant period + negative tests + pandemic year
model1 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust + pandemic_year, data = case_ww_test)
summary(model1) #Review the results
case_ww_test <- case_ww_test %>% mutate(model1_ww_value = seven_day_rolling_average * 73360,
model1_variant_value = case_when(variant_timeline == "Omicron BA.1" ~ -91.39,
variant_timeline == "Omicron BA.2" ~ -89.04,
variant_timeline == "Omicron BA.5" ~ -108.0,
T ~ 1),
model1_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.08016,
model1_pandemicyear_value = pandemic_year * 108.0)
case_ww_test$model1_overall <- -248.8 + case_ww_test$model1_ww_value + case_ww_test$model1_variant_value + case_ww_test$model1_negativetests_value + case_ww_test$model1_pandemicyear_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model1_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + variant period + negative tests + pandemic year")
model2 <- lm(seven_day_average_100k ~ seven_day_rolling_average + rolling_average_daily_negative_tests_pop_adjust, data = case_ww_test)
summary(model2) #Review the results
case_ww_test <- case_ww_test %>% mutate(model2_ww_value = seven_day_rolling_average * 101600.0,
model2_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.1096)
case_ww_test$model2_overall <- -45.32 + case_ww_test$model2_ww_value + case_ww_test$model2_negativetests_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model2_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + negative tests")
model3 <- lm(seven_day_average_100k ~ seven_day_rolling_average, data = case_ww_test)
summary(model3) #Review the results
case_ww_test <- case_ww_test %>% mutate(model3_ww_value = seven_day_rolling_average * 101500.0)
case_ww_test$model3_overall <- 0.08366 + case_ww_test$model3_ww_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model3_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww")
model4 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust, data = case_ww_test)
summary(model4) #Review the results
case_ww_test <- case_ww_test %>% mutate(model4_ww_value = seven_day_rolling_average * 115800.0,
model4_variant_value = case_when(variant_timeline == "Omicron BA.1" ~ 8.794,
variant_timeline == "Omicron BA.2" ~ 4.106,
variant_timeline == "Omicron BA.5" ~ -20.04,
T ~ 1),
model4_negativetests_value = rolling_average_daily_negative_tests_pop_adjust * 0.09240)
case_ww_test$model4_overall <- -42.17 + case_ww_test$model4_ww_value + case_ww_test$model4_variant_value + case_ww_test$model4_negativetests_value
ggplot(case_ww_test, aes(x = as_date(Date), y = seven_day_average_100k)) +
geom_line(color = "black") +
geom_line(aes(x = as_date(Date), y = model4_overall), color = "dodgerblue") +
theme_bw() +
labs(x = "Date",
y = "Seven Day Average Confirmed COVID-19 Cases per 100K Population",
caption = "Black = Actual Cases, Blue = Model\ncases = ww + variant period + negative tests")
library(AICcmodavg)
install.package("AICcmodavg")
install.packages("AICcmodavg")
library(AICcmodavg)
#define list of models
models <- list(model1, model2, model3, model4)
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests')
#calculate AIC of each model
aictab(cand.set = models, modnames = mod.names)
AIC(model1)
case_ww_test$month_year <- paste0(year(case_ww_test$Date), "-", ifelse(nchar(month(case_ww_test$Date) == 1, paste0("0", month(date(case_ww_test$Date))), month(case_ww_test$Date))))
case_ww_test$month_year <- paste0(year(as_date(case_ww_test$Date)), "-", ifelse(nchar(month(as_date(case_ww_test$Date)) == 1, paste0("0", month(as_date(case_ww_test$Date))), month(as_date(case_ww_test$Date)))))
year(as_date(case_ww_test$Date))
month(as_date(case_ww_test$Date))
case_ww_test$month_year <- paste0(year(as_date(case_ww_test$Date)), "-", ifelse(nchar(month(as_date(case_ww_test$Date))) == 1, paste0("0", month(as_date(case_ww_test$Date))), month(as_date(case_ww_test$Date))))
View(case_ww_test)
model5 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust + month_year, data = case_ww_test)
summary(model5) #Review the results
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests', 'ww_variant_ntests_month')
#define list of models
models <- list(model1, model2, model3, model4, model5)
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests', 'ww_variant_ntests_month')
#calculate AIC of each model
aictab(cand.set = models, modnames = mod.names)
unique(case_ww_test$month_year)
look_up <- data.frame(unique(case_ww_test$month_year), seq(1, length(unique(case_ww_test$month_year)), by = 1))
colnames(look_up) <- c("month_year", "month_year_order")
case_ww_test <- merge(case_ww_test, look_up, by = c("month_year"), all.x = TRUE)
model5 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust + month_year_order, data = case_ww_test)
summary(model5) #Review the results
#define list of models
models <- list(model1, model2, model3, model4, model5)
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests', 'ww_variant_ntests_monthorder')
#calculate AIC of each model
aictab(cand.set = models, modnames = mod.names)
look_up$months_since_shot <- c(3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 0)
View(look_up)
look_up$months_since_shot <- c(3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0)
case_ww_test <- merge(case_ww_test, look_up, by = c("month_year"), all.x = TRUE)
model5 <- lm(seven_day_average_100k ~ seven_day_rolling_average + variant_timeline + rolling_average_daily_negative_tests_pop_adjust + months_since_shot, data = case_ww_test)
summary(model5) #Review the results
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests', 'ww_variant_ntests_monthsinceshot')
models <- list(model1, model2, model3, model4, model5)
#specify model names
mod.names <- c('ww_variant_ntests_panyear', 'ww_ntests', 'ww', 'ww_variant_ntests', 'ww_variant_ntests_monthsinceshot')
#calculate AIC of each model
aictab(cand.set = models, modnames = mod.names)
